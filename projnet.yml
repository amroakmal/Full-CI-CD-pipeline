Parameters:
    EnvironmentName:
        Type: String    
    VpcCIDR:
        Type: String
    PublicSubnet1CIDR:
        Type: String

    # NETWORK STARTER CODE
Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true

    InternetGateway:
        Type: AWS::EC2::InternetGateway

    InternetGatewayAttachement:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties: 
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties: 
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            VpcId: !Ref VPC

    PublicNatGatewayEIP1:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachement
        Properties: 
            Domain: vpc

    PublicNatGateway1:
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt PublicNatGatewayEIP1.AllocationId
            SubnetId: !Ref PublicSubnet1

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute: 
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachement               
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1
    
    # SERVER STARTER CODE
    SecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
    
    KubeInstance:
        Type: AWS::EC2::Instance
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt install docker-ce -y
                    sudo usermod -aG docker ubuntu
                    sudo chmod 777 /var/run/docker.sock
                    sudo systemctl start docker
                    sudo systemctl enable docker
                    curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
                    chmod +x ./kubectl
                    sudo mv ./kubectl /usr/local/bin/kubectl
                    sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic test"
                    sudo apt-get update -y
                    curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 
                    sudo chmod +x minikube
                    sudo mv minikube /usr/local/bin/
                    sudo apt-get update -y
                    minikube start
                    sleep 50
                    git clone https://github.com/amroakmal/proj
                    cd proj
                    ./kub/run-kubernetes.sh

            ImageId: ami-0bbe28eb2173f6167 
            KeyName: capstone_ec2_key_pair
            SecurityGroupIds: 
                - !Ref SecGroup
            SubnetId: !Ref PublicSubnet1
            InstanceType: t3.medium 
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                      VolumeSize: '10'
            Tags: 
                - Key: Name
                  Value: "capstone_proj_k8s"